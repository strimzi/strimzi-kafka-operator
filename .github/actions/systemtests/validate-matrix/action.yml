name: "Validate Matrix"
description: "Validates generated matrix and returns feedback message"

inputs:
  matrix:
    description: "JSON matrix generated by generate-matrix action"
    required: true

outputs:
  isValid:
    description: "Whether the matrix is valid (not empty)"
    value: ${{ steps.validate.outputs.isValid }}
  message:
    description: "Feedback message about the validation result"
    value: ${{ steps.validate.outputs.message }}

runs:
  using: "composite"
  steps:
    - name: Validate Matrix
      id: validate
      uses: actions/github-script@v7
      with:
        script: |
          const matrix = JSON.parse(process.env.MATRIX || '[]');
          
          // Check if matrix is empty
          const isEmpty = !matrix || matrix.length === 0;
          
          if (isEmpty) {
            core.setOutput('isValid', 'false');
            
            let errorMessage = "❌ **System test validation failed**\n";
            errorMessage += "\n";
            errorMessage += "The provided pipeline/profile names did not match any configured tests.\n";
            errorMessage += "\n";
            errorMessage += "**Available pipelines:**\n";
            errorMessage += "`acceptance`, `acceptance-helm`, `regression`, `regression-fg`, `regression-rbac`, `smoke`, `upgrade`\n";
            errorMessage += "\n";
            errorMessage += "**Available profiles:**\n";
            errorMessage += "`acceptance`, `azp_connect_mirrormaker`, `azp_dynconfig_listeners_tracing_watcher`, `azp_kafka_oauth`, `azp_kafka_upgrade`, `azp_kraft_upgrade`, `azp_operators`, `azp_rbac_remaining`, `azp_rolling_update_bridge`, `azp_security`, `brokers-and-security`, `operands`, `operators`, `smoke`\n";
            errorMessage += "\n";
            errorMessage += "Please check your command for typos and try again.";
            
            core.setOutput('message', errorMessage);
            return;
          }
          
          // Matrix is valid - create summary of what will run
          core.setOutput('isValid', 'true');
          core.info(`Matrix validation passed. ${matrix.length} job(s) will be executed.`);
          
          const jobs = matrix.map(job => {
            const name = job.jobName || `${job.pipeline}-${job.profile || job.pipeline}-${job.arch}`;
            const agent = job.agent || 'default';
            const timeout = job.timeout || 'default';
            return `- **${name}** (${agent}, ${timeout}min)`;
          }).join('\n');
          
          let successMessage = "✅ **System test validation passed**\n";
          successMessage += "\n";
          successMessage += `The following ${matrix.length} job(s) will be executed:\n`;
          successMessage += "\n";
          successMessage += jobs.replace(/\n/g, '\n') + "\n";
          successMessage += "\n";
          successMessage += "Tests will start after successful build completion.";
          
          core.setOutput('message', successMessage);
      env:
        MATRIX: ${{ inputs.matrix }}