name: Add check & status
description: "Sets a commit/issue status on the given (or auto-detected) SHA."

inputs:
  checkState:
    description: "Check state: error, failure, neutral, pending, or success"
    default: success
  checkName:
    description: "Status-line “context” label (appears in the PR UI)"
    default: custom/check
  checkDescription:
    description: "Short description that shows next to the status"
    default: ''
  sha:
    description: "Commit SHA to attach the status to (auto-detected if empty)"
    required: false

runs:
  using: composite
  steps:
    - name: Add issue/commit check
      id: comment-and-check
      # Run only if action wasn't triggered by comment or manually
      if: github.event_name == 'workflow_dispatch' || github.event_name == 'issue_comment'
      uses: actions/github-script@v7
      env:
        CHECK_STATE: ${{ inputs.checkState }}
        CHECK_NAME: ${{ inputs.checkName }}
        CHECK_DESCRIPTION: ${{ inputs.checkDescription }}
        SHA: ${{ inputs.sha }}
      with:
        script: |
          const {owner, repo} = context.repo;

          const checkState  = process.env.CHECK_STATE
          const checkName   = process.env.CHECK_NAME
          const desc      = process.env.CHECK_DESCRIPTION
          let   sha       = process.env.SHA

          //------------------------------------------------------------------
          // 1) Work out HEAD SHA
          //------------------------------------------------------------------
          if (context.payload.pull_request) {
            sha ||= context.payload.pull_request.head.sha;
          } else if (context.payload.issue?.pull_request) {
            if (!sha) {
              const pr = await github.request(
                context.payload.issue.pull_request.url);
              sha = pr.data.head.sha;
            }
          } else {
            sha ||= context.sha;
          }

          core.info(`Going to work with the following sha: "${sha}".`); 

          if (sha) {
            //------------------------------------------------------------------
            // 2) Map state for commit status API
            //------------------------------------------------------------------
            const stateForStatusApi =
              checkState === 'pending' ? 'pending' :
              checkState === 'failure' ? 'failure' :
              checkState === 'error'   ? 'error'   :
              checkState === 'neutral' ? 'pending' : 'success';
          
            core.info(`Creating commit status "${checkName}"="${stateForStatusApi}" for sha: "${sha}".`);
          
            //------------------------------------------------------------------
            // 3) Create commit status (this creates separate status contexts)
            //------------------------------------------------------------------
            await github.rest.repos.createCommitStatus({
              owner, repo,
              sha,
              state: stateForStatusApi,
              context: checkName,
              description: desc,
              target_url:
                `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}` +
                `/actions/runs/${process.env.GITHUB_RUN_ID}`
            });
          }