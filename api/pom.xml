<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <parent>
        <groupId>io.strimzi</groupId>
        <artifactId>strimzi</artifactId>
        <version>0.47.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>api</artifactId>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <properties>
        <maven.compiler.release>11</maven.compiler.release>

        <!-- Points to the root directory of the Strimzi project directory and can be used for fixed location to configuration files -->
        <strimziRootDirectory>${basedir}${file.separator}..</strimziRootDirectory>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-httpclient-jdk</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-client-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-networking</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-common</artifactId>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-apiextensions</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>io.sundr</groupId>
            <artifactId>builder-annotations</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>crd-generator</artifactId>
            <!-- use provided scope because this is not needed at runtime -->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <useIncrementalCompilation>false</useIncrementalCompilation>
                            <compilerArgs combine.self="override">
                                <arg>-Xlint:unchecked,deprecation</arg>
                            </compilerArgs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <compilerArgs combine.self="override">
                                <arg>-Xlint:deprecation</arg>
                            </compilerArgs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${maven.exec.version}</version>
                <executions>
                    <execution>
                        <!-- This step generates all CRDs apiextensions/v1 which contain only the v1beta2 version. This
                             should be all of them apart from KafkaUser and KafkaTopic. -->
                        <id>generate-crd-co-install-v1</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <argument>${project.basedir}${file.separator}target${file.separator}classes${path.separator}${project.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>
                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>
                                <argument>--label</argument><argument>app:strimzi</argument>
                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>
                                <argument>--target-kube</argument><argument>1.16+</argument>
                                <argument>--crd-api-version</argument><argument>v1</argument>
                                <argument>--api-versions</argument><argument>v1beta2</argument>
                                <argument>--storage-version</argument><argument>v1beta2</argument>
                                <argument>--yaml</argument>
                                <argument>io.strimzi.api.kafka.model.kafka.Kafka=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}040-Crd-kafka.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.connect.KafkaConnect=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}041-Crd-kafkaconnect.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.bridge.KafkaBridge=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}046-Crd-kafkabridge.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.connector.KafkaConnector=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}047-Crd-kafkaconnector.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.mirrormaker2.KafkaMirrorMaker2=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}048-Crd-kafkamirrormaker2.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.rebalance.KafkaRebalance=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}049-Crd-kafkarebalance.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.podset.StrimziPodSet=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}042-Crd-strimzipodset.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.nodepool.KafkaNodePool=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}045-Crd-kafkanodepool.yaml</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- This step generates CRDs apiextensions/v1 for resources which keep v1alpha1 and v1beta1.
                             These should be only KafkaUser and KafkaTopic CRDs which need to keep the older versions
                             in order to allow smooth upgrade of Topic and User Operators without deleting the operands
                             (topics and users inside Kafka) when the CRDs are upgraded from apiextensions/v1beta1
                             to apiextensions/v1. -->
                        <id>generate-crd-co-install-v1-eo</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <argument>${project.basedir}${file.separator}target${file.separator}classes${path.separator}${project.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>
                                <argument>io.strimzi.crdgenerator.CrdGenerator</argument>
                                <argument>--label</argument><argument>app:strimzi</argument>
                                <argument>--label</argument><argument>strimzi.io/crd-install:true</argument>
                                <argument>--target-kube</argument><argument>1.16+</argument>
                                <argument>--crd-api-version</argument><argument>v1</argument>
                                <argument>--api-versions</argument><argument>v1alpha1,v1beta1,v1beta2</argument>
                                <argument>--storage-version</argument><argument>v1beta2</argument>
                                <argument>--yaml</argument>
                                <argument>io.strimzi.api.kafka.model.topic.KafkaTopic=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}043-Crd-kafkatopic.yaml</argument>
                                <argument>io.strimzi.api.kafka.model.user.KafkaUser=${project.basedir}${file.separator}..${file.separator}packaging${file.separator}install${file.separator}cluster-operator${file.separator}044-Crd-kafkauser.yaml</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-doc</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <argument>${project.basedir}${file.separator}target${file.separator}classes${path.separator}${project.basedir}${file.separator}..${file.separator}crd-generator${file.separator}target${file.separator}crd-generator-${project.version}.jar</argument>
                                <argument>io.strimzi.crdgenerator.DocGenerator</argument>
                                <argument>--linker</argument>
                                <argument>io.strimzi.crdgenerator.KubeLinker</argument>
                                <argument>https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/</argument>
                                <argument>modules/appendix_crds.adoc</argument>
                                <argument>io.strimzi.api.kafka.model.kafka.Kafka</argument>
                                <argument>io.strimzi.api.kafka.model.connect.KafkaConnect</argument>
                                <argument>io.strimzi.api.kafka.model.topic.KafkaTopic</argument>
                                <argument>io.strimzi.api.kafka.model.user.KafkaUser</argument>
                                <argument>io.strimzi.api.kafka.model.bridge.KafkaBridge</argument>
                                <argument>io.strimzi.api.kafka.model.connector.KafkaConnector</argument>
                                <argument>io.strimzi.api.kafka.model.mirrormaker2.KafkaMirrorMaker2</argument>
                                <argument>io.strimzi.api.kafka.model.rebalance.KafkaRebalance</argument>
                                <argument>io.strimzi.api.kafka.model.nodepool.KafkaNodePool</argument>
                                <argument>io.strimzi.api.kafka.model.podset.StrimziPodSet</argument>
                            </arguments>
                            <workingDirectory>${project.basedir}${file.separator}..${file.separator}documentation</workingDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.version}</version>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <failOnWarning>true</failOnWarning>
                            <ignoredUnusedDeclaredDependencies>
                                <!-- Used as annotation processed at compile time -->
                                <ignoredUnusedDeclaredDependency>io.sundr:builder-annotations</ignoredUnusedDeclaredDependency>
                                <!-- Used as annotation processed at compile time -->
                                <ignoredUnusedDeclaredDependency>org.projectlombok:lombok</ignoredUnusedDeclaredDependency>
                                <!-- Fabric8 Kubernetes Client and HttpClient are required by the ExamplesTest -->
                                <ignoredUnusedDeclaredDependency>io.fabric8:kubernetes-client</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>io.fabric8:kubernetes-httpclient-jdk</ignoredUnusedDeclaredDependency>
                                <!-- Needed for logging in tests -->
                                <ignoredUnusedDeclaredDependency>org.apache.logging.log4j:log4j-core</ignoredUnusedDeclaredDependency>
                                <!-- Needed for logging in tests using the Kubernetes Client (uses SLF4J) -->
                                <ignoredUnusedDeclaredDependency>org.apache.logging.log4j:log4j-slf4j-impl</ignoredUnusedDeclaredDependency>
                            </ignoredUnusedDeclaredDependencies>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
