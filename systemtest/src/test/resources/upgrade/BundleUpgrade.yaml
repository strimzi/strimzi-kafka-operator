#  --- Structure ---
#  fromVersion: String - From this version we will upgrade the CO to latest = "HEAD"
#  fromExamples: String - Folder name which contains examples to deploy. Downloaded from "fromUrl"
#  deployKafkaVersion: String - version of Kafka, used in initial deployment of Kafka cluster.
#                               It should be the latest supported version of Kafka in older version of Strimzi (the one we are upgrading from).
#                               This version specified in `deployKafkaVersion` has to be in a list of supported version of the Strimzi version we are upgrading to.
#                               That's because we are waiting for successful upgrade of CO with rolling update of all components before we are doing any upgrade of Kafka.
#                               Having unsupported Kafka version specified would fail the test, as the cluster would be in the `NotReady` state (and there wouldn't be any rolling update).
#                               In case that you want to use Kafka version unsupported in the new version of Strimzi, you will have to handle it in the test code directly
#                               (and re-order the steps just for this particular case).
#  fromUrl: String - url, from which examples are downloaded
#  fromKafkaVersionsUrl: String - url, from which is kafka-versions.yaml file downloaded
#  conversionTool:
#    toUrlConversionTool:  String - url, from which conversion tool is downloaded
#    toConversionTool: String - name of folder, which contains conversion tool
#  additionalTopics: int - number of additional topics, which will be created
#  imagesAfterOperations:  Strings - images that corresponding pods should contain. They are checked after upgrade
#    kafka:
#    topicOperator:
#    userOperator:
#  client:
#    continuousClientsMessages: int - message count sent during upgrade
#  environmentInfo:
#    maxK8sVersion: String - maximal version of Kubernetes on which the upgrade test runs
#    status: String - info about stability of the testing environment
#    flakyEnvVariable:  String - name of the environmental variable which is flaky on current environment
#    reason:  #  String - reason why we skip / not skip the test case
#  fromFeatureGates: String - FG added to `STRIMZI_FEATURE_GATES` environment variable, on initial deploy of CO
#  toFeatureGates: String - FG added to `STRIMZI_FEATURE_GATES` environment variable, on upgrade of CO
#  filePaths: path to example files for particular resources
#  fromKafka: path to Kafka and KafkaNodePool resources, collected in one file, in the version of Strimzi, from which we are doing the upgrade
#  toKafka: path to Kafka and KafkaNodePool resources, collected in one file, in the version of Strimzi, to which we are doing the upgrade
#  --- Structure ---

- fromVersion: 0.47.0
  fromExamples: strimzi-0.47.0
  deployKafkaVersion: 3.9.0
  fromUrl: https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.47.0/strimzi-0.47.0.zip
  fromKafkaVersionsUrl: https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/0.47.0/kafka-versions.yaml
  additionalTopics: 2
  imagesAfterOperations:
    kafka: strimzi/kafka:latest-kafka-4.0.0
    topicOperator: strimzi/operator:latest
    userOperator: strimzi/operator:latest
  client:
    continuousClientsMessages: 400
  environmentInfo:
    maxK8sVersion: latest
    status: stable
    flakyEnvVariable: none
    reason: Test is working on environment, where k8s server version is < 1.22
  fromFeatureGates: ""
  toFeatureGates: ""
  filePaths:
    fromKafka: "/examples/kafka/kafka-persistent.yaml"
    toKafka: "/examples/kafka/kafka-persistent.yaml"
- fromVersion: 0.47.0
  fromExamples: strimzi-0.47.0
  deployKafkaVersion: 3.9.0
  fromUrl: https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.47.0/strimzi-0.47.0.zip
  fromKafkaVersionsUrl: https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/0.47.0/kafka-versions.yaml
  additionalTopics: 2
  imagesAfterOperations:
    kafka: strimzi/kafka:latest-kafka-4.0.0
    topicOperator: strimzi/operator:latest
    userOperator: strimzi/operator:latest
  client:
    continuousClientsMessages: 400
  environmentInfo:
    maxK8sVersion: latest
    status: stable
    flakyEnvVariable: none
    reason: Test is working on environment, where k8s server version is < 1.22
  fromFeatureGates: ""
  toFeatureGates: "+ServerSideApplyPhase1"
  filePaths:
    fromKafka: "/examples/kafka/kafka-persistent.yaml"
    toKafka: "/examples/kafka/kafka-persistent.yaml"
