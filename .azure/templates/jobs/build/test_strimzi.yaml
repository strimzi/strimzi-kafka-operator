jobs:
  - job: 'test_strimzi'
    displayName: 'Test Strimzi'
    # Strategy for the job
    strategy:
      matrix:
        'test_strimzi_java-17':
          jdk_version: '17'
          main_build: 'true'
    # Set timeout for jobs
    timeoutInMinutes: 90
    # Base system
    pool:
      vmImage: Ubuntu-22.04
    # Pipeline steps
    steps:
      # Get cached Maven repository
      - template: "../../steps/maven_cache.yaml"

      # Install Prerequisites
      - template: "../../steps/prerequisites/install_yq.yaml"
      - template: '../../steps/prerequisites/install_docker.yaml'
      - template: '../../steps/prerequisites/install_minikube.yaml'
      - template: '../../steps/prerequisites/install_java.yaml'
        parameters:
          JDK_VERSION: $(jdk_version)

      # Run the unit and integration tests
      - bash: "mvn -e -V -B -Dmaven.javadoc.skip=true -Dsurefire.rerunFailingTestsCount=5 -Dfailsafe.rerunFailingTestsCount=2 install"
        env:
          # Test container optimization and also we eliminate pulling RYUK image from DockerHub to prevent limits
          TESTCONTAINERS_RYUK_DISABLED: TRUE
          TESTCONTAINERS_CHECKS_DISABLE: TRUE
        displayName: "Unit and Integration tests"

      # Publish test results
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: "Unit & Integration tests"
        displayName: "Publish Test Results"
        condition: always()

      # Publish test coverage results
      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/target/site/jacoco/jacoco.xml
        displayName: "Publish Test Coverage"