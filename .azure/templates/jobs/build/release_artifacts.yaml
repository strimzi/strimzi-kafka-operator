jobs:
  - job: 'release_artifacts'
    displayName: 'Prepare and release artifacts'
    # Set timeout for jobs
    timeoutInMinutes: 60
    # Base system
    pool:
      vmImage: 'Ubuntu-22.04'
    # Pipeline steps
    steps:
      # Install Prerequisites
      - template: "../../steps/prerequisites/install_yq.yaml"
      - template: "../../steps/prerequisites/install_asciidoctor.yaml"
      - template: '../../steps/prerequisites/install_java.yaml'

      # Build the release files
      - bash: "make release"
        displayName: "Build release files"
        env:
          RELEASE_VERSION: '${{ parameters.releaseVersion }}'

      # Deploy Java artifacts
      - bash: "make pushtocentral"
        displayName: "Deploy Java artifacts"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          GPG_PASSPHRASE: $(GPG_PASSPHRASE)
          GPG_SIGNING_KEY: $(GPG_SIGNING_KEY)
          CENTRAL_USERNAME: $(CENTRAL_USERNAME)
          CENTRAL_PASSWORD: $(CENTRAL_PASSWORD)

      # We have to TAR the artifacts directory and store it
      - bash: tar -cvpf release.tar ./*${{ parameters.releaseVersion }}*
        displayName: "Tar the release archives"
      - publish: $(System.DefaultWorkingDirectory)/release.tar
        artifact: ReleaseArchives

      # Build the documentation
      - bash: "make docu_html docu_htmlnoheader docu_pdf"
        displayName: "Build documentation"
        env:
          RELEASE_VERSION: '${{ parameters.releaseVersion }}'

      # We have to TAR the artifacts directory and store it
      - bash: tar -cvpf documentation.tar ./documentation/html ./documentation/htmlnoheader ./documentation/pdf
        displayName: "Tar the documentation"
      - publish: $(System.DefaultWorkingDirectory)/documentation.tar
        artifact: ReleaseDocs