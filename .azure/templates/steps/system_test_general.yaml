
parameters:
  name: ''
  display_name: ''
  profile: ''
  excludedGroups: ''
  cluster_operator_install_type: ''
  timeout: ''
  strimzi_rbac_scope: 'CLUSTER'
  # Currently minikube with 2 CPUs and ~8GB RAM can handle 1 test at once (not more).
  # If these resources will be upgraded in the future, we can enable parallelism.
  parallel: '1'
  run_parallel: false
  releaseVersion: "latest"
  strimzi_use_kraft_in_tests: "true"
  strimzi_use_node_pools_in_tests: "true"

jobs:
- job: '${{ parameters.name }}_system_tests'
  displayName: '${{ parameters.display_name }}'
  # Strategy for the job
  strategy:
    matrix:
      ${{ parameters.name }}:
        jdk_version: '17'
  # Base system
  pool:
    vmImage: 'Ubuntu-22.04'
  # Environment variables
  variables:
    - template: 'default_variables.yaml'
  # Set timeout for jobs
  timeoutInMinutes: ${{ parameters.timeout }}
  # Clean up whole workspace
  workspace:
    clean: all
  # Pipeline steps
  steps:
    - script: echo "##vso[task.setvariable variable=docker_tag]${{ parameters.releaseVersion }}"
      displayName: "Set DOCKER_TAG to ${{ parameters.releaseVersion }}"

    - script: echo "##vso[task.setvariable variable=docker_registry]quay.io"
      displayName: "Set DOCKER_REGISTRY to quay.io based on releaseVersion: ${{ parameters.releaseVersion }}"
      condition: not(eq( '${{ parameters.releaseVersion }}', 'latest' ))

    - script: echo "##vso[task.setvariable variable=st_kafka_version]${{ parameters.kafkaVersion }}"
      displayName: "Set ST_KAFKA_VERSION to specified Kafka version based on kafkaVersion: ${{ parameters.kafkaVersion }}"
      condition: not(eq( '${{ parameters.kafkaVersion }}', 'latest' ))

    # Log variables
    - template: "log_variables.yaml"

    # Clean up unnecessary tools
    - template: "clean_up_workspace.yaml"

    # Get cached Maven repository
    - template: "./maven_cache.yaml"
    - task: Cache@2
      inputs:
        key: '"kafka-binaries" | kafka-versions.yaml'
        path: docker-images/artifacts/binaries/kafka/archives
      displayName: Kafka binaries cache

    # Install Prerequisites
    - template: "./prerequisites/install_yq.yaml"
    - template: "./prerequisites/install_shellcheck.yaml"
    - template: "./prerequisites/install_helm.yaml"
    - template: './prerequisites/install_docker.yaml'
    - template: './prerequisites/install_minikube.yaml'
    - template: './prerequisites/install_java.yaml'
      parameters:
        JDK_VERSION: $(jdk_version)

    # Build Strimzi and its images => used when running STs against PR or main branch where container images should be built
    - bash: |
        eval $(minikube docker-env)
        make java_install
        make docker_build
        make docker_tag
        make docker_push
      env:
        MVN_ARGS: '-B -DskipTests -Dmaven.javadoc.skip=true'
      displayName: "Build Strimzi images"
      # Build images in case that we are not running tests on the `main` branch and the docker_tag is `latest`, which means
      # that we are running tests on a PR
      condition: and(eq(variables['docker_tag'], 'latest'), ne(variables['build.sourceBranch'], 'refs/heads/main'))

    # Build Strimzi without images => used when running the STs against releases or release candidates where the images
    # are already built, and we need only the Java build
    - bash: "make java_install"
      env:
        MVN_ARGS: "-DskipTests -Dmaven.javadoc.skip=true  -e -V -B"
      displayName: "Build Strimzi Java code"
      # Build Strimzi without images in case that we are on the `main` branch or in case that we are running tests against tags during release
      condition: or(ne(variables['docker_tag'], 'latest'), eq(variables['build.sourceBranch'], 'refs/heads/main'))

    - bash: mkdir -p docker-images/artifacts/binaries/kafka/archives
      displayName: "Create dir for Kafka binaries cache"
      condition: ne(variables['docker_tag'], 'latest')

    - bash: |
        eval $(minikube docker-env)
        eval $(./systemtest/src/test/resources/connect-build/build-connect-image.sh "$KAFKA_VERSION" "$BASE_IMAGE")
        echo "connect build image: $CONNECT_IMAGE_WITH_FILE_SINK_PLUGIN"
        echo "##vso[task.setvariable variable=connectImage]$(echo $CONNECT_IMAGE_WITH_FILE_SINK_PLUGIN)"
      displayName: "Build KafkaConnect's image with file-sink plugin"
      env:
        BASE_IMAGE: '$(docker_registry)/$(docker_org)/kafka:$(docker_tag)-kafka-KAFKA_VERSION'
        KAFKA_VERSION: '${{ parameters.kafkaVersion }}'
      # we want to let Connect image build for different versions of Kafka inside the upgrade/downgrade STs
      condition: not(contains('${{ parameters.profile }}', 'upgrade'))

    # We need to set DOCKER_REGISTRY to IP and port of service, which is created by minikube registry addon, port is always 80
    # Default value for PRs is localhost:5000 because we need to push built images into minikube registry and make them available for pods
    - script: echo "##vso[task.setvariable variable=docker_registry]$(kubectl get service registry -n kube-system -o=jsonpath='{.spec.clusterIP}'):80"
      displayName: "Set docker_registry to local registry in minikube"
      condition: eq(variables['docker_registry'], 'localhost:5000')

    - bash: ".azure/scripts/setup_upgrade.sh"
      displayName: "Setup environment for upgrade"
      condition: contains('${{ parameters.profile }}', 'upgrade')

    - bash: |
        export KAFKA_VERSION=$([[ "${KAFKA_VERSION}" == *"latest"* ]] && yq eval '.[] | select(.default) | .version' kafka-versions.yaml || echo "${KAFKA_VERSION}")
        echo "##vso[task.setvariable variable=kafka_tiered_storage_base_image]$(echo $DOCKER_REGISTRY/$DOCKER_ORG/kafka:$DOCKER_TAG-kafka-$KAFKA_VERSION)"
      displayName: "Set KAFKA_TIERED_STORAGE_BASE_IMAGE for the Tiered Storage tests"
      env:
        KAFKA_VERSION: '${{ parameters.kafkaVersion }}'

    - task: Maven@4
      inputs:
        mavenPOMFile: 'systemtest/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: 'default'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/failsafe-reports/TEST-*.xml'
        goals: 'verify'
        options: >-
          -P${{ parameters.profile }} 
          -DexcludedGroups=flaky,loadbalancer,networkpolicies,${{ parameters.excludedGroups }} 
          -Dmaven.javadoc.skip=true 
          -B 
          -V 
          -Dfailsafe.rerunFailingTestsCount=2 
          -Djunit.jupiter.execution.parallel.enabled=${{ parameters.run_parallel }} 
          -Djunit.jupiter.execution.parallel.config.fixed.parallelism="${{ parameters.parallel }}" 
          -Dskip.surefire.tests 
          -s ./.azure/systemtests/systemtest-settings.xml

      env:
        DOCKER_TAG: $(docker_tag)
        BRIDGE_IMAGE: "latest-released"
        STRIMZI_RBAC_SCOPE: '${{ parameters.strimzi_rbac_scope }}'
        DOCKER_REGISTRY: registry.minikube
        CLUSTER_OPERATOR_INSTALL_TYPE: '${{ parameters.cluster_operator_install_type }}'
        STRIMZI_FEATURE_GATES: '${{ parameters.strimzi_feature_gates }}'
        STRIMZI_USE_KRAFT_IN_TESTS: '${{ parameters.strimzi_use_kraft_in_tests }}'
        STRIMZI_USE_NODE_POOLS_IN_TESTS: '${{ parameters.strimzi_use_node_pools_in_tests }}'
        BUILD_ID: $(Agent.JobName)
        RESOURCE_ALLOCATION_STRATEGY: "NOT_SHARED"
        TEST_LOG_DIR: $(test_log_dir)
        CONNECT_IMAGE_WITH_FILE_SINK_PLUGIN: $(connectImage)
      displayName: 'Run systemtests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: "systemtest"
        testRunTitle: "System tests"
      condition: always()

    - bash: rm -rf systemtest/target/logs/timeMeasuring
      displayName: 'Remove timeMeasuring dir from logs'
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(test_log_dir)
        artifactName: systemtest-logs
      displayName: 'Publish logs from failed tests'
      condition: always()
